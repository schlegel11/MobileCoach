package org.isgf.mhc.modules.quiz;

import lombok.Data;
import lombok.EqualsAndHashCode;

import org.bson.types.ObjectId;
import org.isgf.mhc.conf.AdminMessageStrings;
import org.isgf.mhc.modules.AbstractModule;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
@Data
@EqualsAndHashCode(callSuper = false)
public abstract class QuizModule extends AbstractModule {
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout	mainLayout;
	@AutoGenerated
	private VerticalLayout	closeButtonLayout;
	@AutoGenerated
	private Button			closeButton;
	@AutoGenerated
	private Button			sendMessageToSelectedButton;
	@AutoGenerated
	private Table			relevantDialogMessagesTable;
	@AutoGenerated
	private Label			relevantDialogMessagesLabel;
	@AutoGenerated
	private ComboBox		selectQuestionMessageComboBox;
	@AutoGenerated
	private Label			selectQuestionMessageLabel;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	protected QuizModule(final ObjectId interventionId) {
		super(interventionId);

		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		localize(selectQuestionMessageLabel,
				AdminMessageStrings.MODULES__QUIZ__SELECT_RELEVANT_MESSAGE);
		localize(
				relevantDialogMessagesLabel,
				AdminMessageStrings.MODULES__QUIZ__FOLLOWING_MESSAGES_SENT_TO_PARTICIPANTS);
		localize(
				sendMessageToSelectedButton,
				AdminMessageStrings.MODULES__QUIZ__SEND_MESSAGE_TO_SELECTED_PARTICIPANTS);
		localize(closeButton, AdminMessageStrings.GENERAL__CLOSE);
	}

	@Override
	protected Button getCloseButton() {
		return closeButton;
	}

	@Override
	public AdminMessageStrings getName() {
		return AdminMessageStrings.MODULES__QUIZ__NAME;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("700px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("700px");
		setHeight("-1px");

		// selectQuestionMessageLabel
		selectQuestionMessageLabel = new Label();
		selectQuestionMessageLabel.setImmediate(false);
		selectQuestionMessageLabel.setWidth("-1px");
		selectQuestionMessageLabel.setHeight("-1px");
		selectQuestionMessageLabel
				.setValue("!!! Select message relevant for quiz (containing the question):");
		mainLayout.addComponent(selectQuestionMessageLabel);

		// selectQuestionMessageComboBox
		selectQuestionMessageComboBox = new ComboBox();
		selectQuestionMessageComboBox.setImmediate(false);
		selectQuestionMessageComboBox.setWidth("100.0%");
		selectQuestionMessageComboBox.setHeight("-1px");
		mainLayout.addComponent(selectQuestionMessageComboBox);

		// relevantDialogMessagesLabel
		relevantDialogMessagesLabel = new Label();
		relevantDialogMessagesLabel.setImmediate(false);
		relevantDialogMessagesLabel.setWidth("-1px");
		relevantDialogMessagesLabel.setHeight("-1px");
		relevantDialogMessagesLabel
				.setValue("!!! The following messages have been sent to participants in the near past:");
		mainLayout.addComponent(relevantDialogMessagesLabel);

		// relevantDialogMessagesTable
		relevantDialogMessagesTable = new Table();
		relevantDialogMessagesTable.setImmediate(false);
		relevantDialogMessagesTable.setWidth("100.0%");
		relevantDialogMessagesTable.setHeight("250px");
		mainLayout.addComponent(relevantDialogMessagesTable);

		// sendMessageToSelectedButton
		sendMessageToSelectedButton = new Button();
		sendMessageToSelectedButton
				.setCaption("!!! Send Message To Selected Participants");
		sendMessageToSelectedButton.setImmediate(true);
		sendMessageToSelectedButton.setWidth("100.0%");
		sendMessageToSelectedButton.setHeight("-1px");
		mainLayout.addComponent(sendMessageToSelectedButton);

		// closeButtonLayout
		closeButtonLayout = buildCloseButtonLayout();
		mainLayout.addComponent(closeButtonLayout);

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildCloseButtonLayout() {
		// common part: create layout
		closeButtonLayout = new VerticalLayout();
		closeButtonLayout.setImmediate(false);
		closeButtonLayout.setWidth("100.0%");
		closeButtonLayout.setHeight("-1px");
		closeButtonLayout.setMargin(true);

		// closeButton
		closeButton = new Button();
		closeButton.setCaption("!!! Close");
		closeButton.setImmediate(true);
		closeButton.setWidth("-1px");
		closeButton.setHeight("-1px");
		closeButtonLayout.addComponent(closeButton);
		closeButtonLayout.setComponentAlignment(closeButton, new Alignment(48));

		return closeButtonLayout;
	}

}
