package org.isgf.mhc.ui.views.components.interventions;

import lombok.Data;
import lombok.EqualsAndHashCode;

import org.isgf.mhc.conf.AdminMessageStrings;
import org.isgf.mhc.conf.ThemeImageStrings;
import org.isgf.mhc.ui.views.components.AbstractCustomComponent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Slider;
import com.vaadin.ui.VerticalLayout;

/**
 * Provides the XYZ component
 * 
 * @author Andreas Filler
 */
@SuppressWarnings("serial")
@Data
@EqualsAndHashCode(callSuper = false)
public class InterventionBasicSettingsComponent extends AbstractCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout	mainLayout;
	@AutoGenerated
	private GridLayout		settingsGridLayout;
	@AutoGenerated
	private Slider			secondsDelayBetweenEachParticipantSlider;
	@AutoGenerated
	private Label			secondsDelayBetweenEachParticipantLabel;
	@AutoGenerated
	private Slider			hourOfRuleExecutionSlider;
	@AutoGenerated
	private Label			hourOfRuleExecutionLabel;
	@AutoGenerated
	private Button			switchMessagingButton;
	@AutoGenerated
	private Button			switchInterventionButton;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public InterventionBasicSettingsComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		localize(
				secondsDelayBetweenEachParticipantLabel,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SECONDS_DELAY_BETWEEN_EACH_PARTICIPANT_LABEL);
		localize(
				hourOfRuleExecutionLabel,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__HOUR_OF_RULE_EXECUTION_LABEL);
		localize(
				secondsDelayBetweenEachParticipantSlider,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SECONDS_DELAY_BETWEEN_EACH_PARTICIPANT_SLIDER);
		localize(
				hourOfRuleExecutionSlider,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__HOUR_OF_RULE_EXECUTION_SLIDER);
		localize(
				switchInterventionButton,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_INTERVENTION_BUTTON_INACTIVE);
		localize(
				switchMessagingButton,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_MESSAGING_BUTTON_INACTIVE);

		secondsDelayBetweenEachParticipantSlider.setMin(0);
		secondsDelayBetweenEachParticipantSlider.setMax(120);
		hourOfRuleExecutionSlider.setMin(0);
		hourOfRuleExecutionSlider.setMax(23);

		// set start settings
		adjust(false, false, 0, 0);
	}

	protected void adjust(final boolean interventionStatus,
			final boolean messagingStatus, final int hourOfRuleExecution,
			final int secondsBetweenEachParticipant) {
		// Adjust intervention status
		if (interventionStatus != switchInterventionButton.isEnabled()) {
			if (interventionStatus) {
				switchInterventionButton.setIcon(new ThemeResource(
						ThemeImageStrings.ACTIVE_ICON));
				localize(
						switchInterventionButton,
						AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_INTERVENTION_BUTTON_ACTIVE);
			} else {
				switchInterventionButton.setIcon(new ThemeResource(
						ThemeImageStrings.INACTIVE_ICON));
				localize(
						switchInterventionButton,
						AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_INTERVENTION_BUTTON_INACTIVE);
			}
		}

		// Adjust messaging status
		if (messagingStatus != switchMessagingButton.isEnabled()) {
			if (messagingStatus) {
				switchMessagingButton.setIcon(new ThemeResource(
						ThemeImageStrings.ACTIVE_ICON));
				localize(
						switchMessagingButton,
						AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_MESSAGING_BUTTON_ACTIVE);

				secondsDelayBetweenEachParticipantSlider.setEnabled(false);
				hourOfRuleExecutionSlider.setEnabled(false);
			} else {
				switchMessagingButton.setIcon(new ThemeResource(
						ThemeImageStrings.INACTIVE_ICON));
				localize(
						switchMessagingButton,
						AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_MESSAGING_BUTTON_INACTIVE);

				secondsDelayBetweenEachParticipantSlider.setEnabled(true);
				hourOfRuleExecutionSlider.setEnabled(true);
			}
		}

		// Adjust hour of rule execution
		localize(
				hourOfRuleExecutionSlider,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__HOUR_OF_RULE_EXECUTION_SLIDER,
				hourOfRuleExecution);
		hourOfRuleExecutionSlider.setValue(new Double(hourOfRuleExecution));

		// Adjust seconds between each participant
		localize(
				secondsDelayBetweenEachParticipantSlider,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SECONDS_DELAY_BETWEEN_EACH_PARTICIPANT_SLIDER,
				hourOfRuleExecution);
		secondsDelayBetweenEachParticipantSlider.setValue(new Double(
				secondsBetweenEachParticipant));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// switchInterventionButton
		switchInterventionButton = new Button();
		switchInterventionButton.setCaption("!!! Activate Intervention");
		switchInterventionButton.setImmediate(true);
		switchInterventionButton.setWidth("100.0%");
		switchInterventionButton.setHeight("-1px");
		mainLayout.addComponent(switchInterventionButton);

		// switchMessagingButton
		switchMessagingButton = new Button();
		switchMessagingButton.setCaption("!!! Activate Messaging");
		switchMessagingButton.setImmediate(true);
		switchMessagingButton.setWidth("100.0%");
		switchMessagingButton.setHeight("-1px");
		mainLayout.addComponent(switchMessagingButton);

		// settingsGridLayout
		settingsGridLayout = buildSettingsGridLayout();
		mainLayout.addComponent(settingsGridLayout);

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildSettingsGridLayout() {
		// common part: create layout
		settingsGridLayout = new GridLayout();
		settingsGridLayout.setImmediate(false);
		settingsGridLayout.setWidth("100.0%");
		settingsGridLayout.setHeight("-1px");
		settingsGridLayout.setMargin(false);
		settingsGridLayout.setSpacing(true);
		settingsGridLayout.setColumns(2);
		settingsGridLayout.setRows(2);

		// hourOfRuleExecutionLabel
		hourOfRuleExecutionLabel = new Label();
		hourOfRuleExecutionLabel.setImmediate(false);
		hourOfRuleExecutionLabel.setWidth("-1px");
		hourOfRuleExecutionLabel.setHeight("-1px");
		hourOfRuleExecutionLabel
				.setValue("!!! Hour of daily rule execution (24 hours format)");
		settingsGridLayout.addComponent(hourOfRuleExecutionLabel, 0, 0);
		settingsGridLayout.setComponentAlignment(hourOfRuleExecutionLabel,
				new Alignment(33));

		// hourOfRuleExecutionSlider
		hourOfRuleExecutionSlider = new Slider();
		hourOfRuleExecutionSlider.setCaption("!!! xx:00");
		hourOfRuleExecutionSlider.setImmediate(false);
		hourOfRuleExecutionSlider.setWidth("100.0%");
		hourOfRuleExecutionSlider.setHeight("-1px");
		settingsGridLayout.addComponent(hourOfRuleExecutionSlider, 1, 0);
		settingsGridLayout.setComponentAlignment(hourOfRuleExecutionSlider,
				new Alignment(48));

		// secondsDelayBetweenEachParticipantLabel
		secondsDelayBetweenEachParticipantLabel = new Label();
		secondsDelayBetweenEachParticipantLabel.setImmediate(false);
		secondsDelayBetweenEachParticipantLabel.setWidth("-1px");
		secondsDelayBetweenEachParticipantLabel.setHeight("-1px");
		secondsDelayBetweenEachParticipantLabel
				.setValue("!!! Seconds between each participant (to reduce server load)");
		settingsGridLayout.addComponent(
				secondsDelayBetweenEachParticipantLabel, 0, 1);
		settingsGridLayout.setComponentAlignment(
				secondsDelayBetweenEachParticipantLabel, new Alignment(33));

		// secondsDelayBetweenEachParticipantSlider
		secondsDelayBetweenEachParticipantSlider = new Slider();
		secondsDelayBetweenEachParticipantSlider.setCaption("!!! x seconds");
		secondsDelayBetweenEachParticipantSlider.setImmediate(false);
		secondsDelayBetweenEachParticipantSlider.setWidth("100.0%");
		secondsDelayBetweenEachParticipantSlider.setHeight("-1px");
		settingsGridLayout.addComponent(
				secondsDelayBetweenEachParticipantSlider, 1, 1);
		settingsGridLayout.setComponentAlignment(
				secondsDelayBetweenEachParticipantSlider, new Alignment(48));

		return settingsGridLayout;
	}

}
