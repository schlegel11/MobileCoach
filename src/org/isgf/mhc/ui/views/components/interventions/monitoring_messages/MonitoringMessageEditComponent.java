package org.isgf.mhc.ui.views.components.interventions.monitoring_messages;

import lombok.Data;
import lombok.EqualsAndHashCode;

import org.isgf.mhc.conf.AdminMessageStrings;
import org.isgf.mhc.ui.views.components.AbstractModelObjectEditComponent;
import org.isgf.mhc.ui.views.components.basics.MediaObjectIntegrationComponentWithController;
import org.isgf.mhc.ui.views.components.basics.VariableTextFieldComponent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

/**
 * Provides a monitoring message edit component
 * 
 * @author Andreas Filler
 */
@SuppressWarnings("serial")
@Data
@EqualsAndHashCode(callSuper = false)
public class MonitoringMessageEditComponent extends
		AbstractModelObjectEditComponent {
	@AutoGenerated
	private VerticalLayout									mainLayout;

	@AutoGenerated
	private GridLayout										buttonLayout;

	@AutoGenerated
	private Button											closeButton;

	@AutoGenerated
	private GridLayout										gridLayout;

	@AutoGenerated
	private VariableTextFieldComponent						storeVariableTextFieldComponent;

	@AutoGenerated
	private Label											storeVariableLabel;

	@AutoGenerated
	private MediaObjectIntegrationComponentWithController	integratedMediaObjectComponent;

	@AutoGenerated
	private Label											integratedMediaObjectLabel;

	@AutoGenerated
	private VariableTextFieldComponent						textWithPlaceholdersTextFieldComponent;

	@AutoGenerated
	private Label											textWithPlaceholdersLabel;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@Override
	public void registerOkButtonListener(final ClickListener clickListener) {
		closeButton.addClickListener(clickListener);
	}

	@Override
	public void registerCancelButtonListener(final ClickListener clickListener) {
		// not required
	}

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	protected MonitoringMessageEditComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		integratedMediaObjectLabel.setContentMode(ContentMode.HTML);
		localize(
				textWithPlaceholdersLabel,
				AdminMessageStrings.MONITORING_MESSAGE_EDITING__TEXT_WITH_PLACEHOLDERS);
		localize(
				integratedMediaObjectLabel,
				AdminMessageStrings.MONITORING_MESSAGE_EDITING__INTEGRATED_MEDIA_OBJECT);
		localize(
				storeVariableLabel,
				AdminMessageStrings.MONITORING_MESSAGE_EDITING__STORE_RESULT_TO_VARIABLE);
		localize(closeButton, AdminMessageStrings.GENERAL__CLOSE);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("800px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("800px");
		setHeight("-1px");

		// gridLayout
		gridLayout = buildGridLayout();
		mainLayout.addComponent(gridLayout);
		mainLayout.setExpandRatio(gridLayout, 1.0f);

		// buttonLayout
		buttonLayout = buildButtonLayout();
		mainLayout.addComponent(buttonLayout);
		mainLayout.setComponentAlignment(buttonLayout, new Alignment(48));

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildGridLayout() {
		// common part: create layout
		gridLayout = new GridLayout();
		gridLayout.setImmediate(false);
		gridLayout.setWidth("100.0%");
		gridLayout.setHeight("-1px");
		gridLayout.setMargin(false);
		gridLayout.setSpacing(true);
		gridLayout.setColumns(2);
		gridLayout.setRows(3);

		// textWithPlaceholdersLabel
		textWithPlaceholdersLabel = new Label();
		textWithPlaceholdersLabel.setImmediate(false);
		textWithPlaceholdersLabel.setWidth("-1px");
		textWithPlaceholdersLabel.setHeight("-1px");
		textWithPlaceholdersLabel.setValue("!!! Text (with placeholders):");
		gridLayout.addComponent(textWithPlaceholdersLabel, 0, 0);

		// textWithPlaceholdersTextFieldComponent
		textWithPlaceholdersTextFieldComponent = new VariableTextFieldComponent();
		textWithPlaceholdersTextFieldComponent.setImmediate(false);
		textWithPlaceholdersTextFieldComponent.setWidth("500px");
		textWithPlaceholdersTextFieldComponent.setHeight("-1px");
		gridLayout.addComponent(textWithPlaceholdersTextFieldComponent, 1, 0);
		gridLayout.setComponentAlignment(
				textWithPlaceholdersTextFieldComponent, new Alignment(34));

		// integratedMediaObjectLabel
		integratedMediaObjectLabel = new Label();
		integratedMediaObjectLabel.setStyleName("media-object-description");
		integratedMediaObjectLabel.setImmediate(false);
		integratedMediaObjectLabel.setWidth("-1px");
		integratedMediaObjectLabel.setHeight("-1px");
		integratedMediaObjectLabel.setValue("!!! Integrated media object:");
		gridLayout.addComponent(integratedMediaObjectLabel, 0, 1);

		// integratedMediaObjectComponent
		integratedMediaObjectComponent = new MediaObjectIntegrationComponentWithController();
		integratedMediaObjectComponent.setImmediate(false);
		integratedMediaObjectComponent.setWidth("500px");
		integratedMediaObjectComponent.setHeight("300px");
		gridLayout.addComponent(integratedMediaObjectComponent, 1, 1);
		gridLayout.setComponentAlignment(integratedMediaObjectComponent,
				new Alignment(34));

		// storeVariableLabel
		storeVariableLabel = new Label();
		storeVariableLabel.setImmediate(false);
		storeVariableLabel.setWidth("-1px");
		storeVariableLabel.setHeight("-1px");
		storeVariableLabel
				.setValue("!!! Store result to variable (if required):");
		gridLayout.addComponent(storeVariableLabel, 0, 2);

		// storeVariableTextFieldComponent
		storeVariableTextFieldComponent = new VariableTextFieldComponent();
		storeVariableTextFieldComponent.setImmediate(false);
		storeVariableTextFieldComponent.setWidth("500px");
		storeVariableTextFieldComponent.setHeight("-1px");
		gridLayout.addComponent(storeVariableTextFieldComponent, 1, 2);
		gridLayout.setComponentAlignment(storeVariableTextFieldComponent,
				new Alignment(34));

		return gridLayout;
	}

	@AutoGenerated
	private GridLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new GridLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("100.0%");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(true);
		buttonLayout.setSpacing(true);
		buttonLayout.setColumns(2);

		// closeButton
		closeButton = new Button();
		closeButton.setCaption("!!! Close");
		closeButton.setIcon(new ThemeResource("img/ok-icon-small.png"));
		closeButton.setImmediate(true);
		closeButton.setWidth("140px");
		closeButton.setHeight("-1px");
		buttonLayout.addComponent(closeButton, 1, 0);
		buttonLayout.setComponentAlignment(closeButton, new Alignment(9));

		return buttonLayout;
	}

}
