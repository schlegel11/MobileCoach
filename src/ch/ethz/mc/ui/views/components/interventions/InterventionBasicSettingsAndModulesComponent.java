package ch.ethz.mc.ui.views.components.interventions;

/*
 * Copyright (C) 2014-2015 MobileCoach Team at Health IS-Lab
 * 
 * See a detailed listing of copyright owners and team members in
 * the README.md file in the root folder of this project.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import lombok.Data;
import lombok.EqualsAndHashCode;
import ch.ethz.mc.conf.AdminMessageStrings;
import ch.ethz.mc.conf.Constants;
import ch.ethz.mc.conf.ThemeImageStrings;
import ch.ethz.mc.ui.views.components.AbstractCustomComponent;
import ch.ethz.mc.ui.views.components.simulator.SimulatorComponentWithController;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

/**
 * Provides the XYZ component
 * 
 * @author Andreas Filler
 */
@SuppressWarnings("serial")
@Data
@EqualsAndHashCode(callSuper = false)
public class InterventionBasicSettingsAndModulesComponent extends
		AbstractCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout						mainLayout;
	@AutoGenerated
	private SimulatorComponentWithController	simulatorComponent;
	@AutoGenerated
	private GridLayout							gridLayout_1;
	@AutoGenerated
	private ComboBox							senderIdentificationSelectionComboBox;
	@AutoGenerated
	private Label								senderIdentificationSelectionLabel;
	@AutoGenerated
	private Button								switchMessagingButton;
	@AutoGenerated
	private Button								switchInterventionButton;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	protected InterventionBasicSettingsAndModulesComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		localize(
				switchInterventionButton,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_INTERVENTION_BUTTON_INACTIVE);
		localize(
				switchMessagingButton,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_MONITORING_BUTTON_INACTIVE);
		localize(
				senderIdentificationSelectionLabel,
				AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SENDER_IDENTIFICATION_SELECTION_LABEL);

		// adjust combo box
		senderIdentificationSelectionComboBox.setImmediate(true);
		senderIdentificationSelectionComboBox.setNullSelectionAllowed(true);
		senderIdentificationSelectionComboBox.setTextInputAllowed(false);

		// Deactivate simulator if not set
		if (!Constants.isSimulatedDateAndTime()) {
			simulatorComponent.setVisible(false);
		}

		// set start settings
		adjust(false, false);
	}

	protected void adjust(final boolean interventionStatus,
			final boolean messagingStatus) {
		// Adjust intervention status
		if (interventionStatus) {
			switchInterventionButton.setIcon(new ThemeResource(
					ThemeImageStrings.ACTIVE_ICON_SMALL));
			localize(
					switchInterventionButton,
					AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_INTERVENTION_BUTTON_ACTIVE);

			switchMessagingButton.setEnabled(true);
		} else {
			switchInterventionButton.setIcon(new ThemeResource(
					ThemeImageStrings.INACTIVE_ICON_SMALL));
			localize(
					switchInterventionButton,
					AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_INTERVENTION_BUTTON_INACTIVE);

			switchMessagingButton.setEnabled(false);
		}

		// Adjust messaging status
		if (messagingStatus) {
			switchMessagingButton.setIcon(new ThemeResource(
					ThemeImageStrings.ACTIVE_ICON_SMALL));
			localize(
					switchMessagingButton,
					AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_MONITORING_BUTTON_ACTIVE);

			switchInterventionButton.setEnabled(false);
		} else {
			switchMessagingButton.setIcon(new ThemeResource(
					ThemeImageStrings.INACTIVE_ICON_SMALL));
			localize(
					switchMessagingButton,
					AdminMessageStrings.INTERVENTION_BASIC_SETTINGS_TAB__SWITCH_MONITORING_BUTTON_INACTIVE);

			switchInterventionButton.setEnabled(true);
		}

		// Adjust sender identification selection
		if (messagingStatus) {
			senderIdentificationSelectionComboBox.setEnabled(false);
		} else {
			senderIdentificationSelectionComboBox.setEnabled(true);
		}
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// switchInterventionButton
		switchInterventionButton = new Button();
		switchInterventionButton.setCaption("!!! Activate Intervention");
		switchInterventionButton.setImmediate(true);
		switchInterventionButton.setWidth("100.0%");
		switchInterventionButton.setHeight("-1px");
		mainLayout.addComponent(switchInterventionButton);

		// switchMessagingButton
		switchMessagingButton = new Button();
		switchMessagingButton.setCaption("!!! Activate Messaging");
		switchMessagingButton.setImmediate(true);
		switchMessagingButton.setWidth("100.0%");
		switchMessagingButton.setHeight("-1px");
		mainLayout.addComponent(switchMessagingButton);

		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		mainLayout.addComponent(gridLayout_1);

		// simulatorComponent
		simulatorComponent = new SimulatorComponentWithController();
		simulatorComponent.setImmediate(false);
		simulatorComponent.setWidth("100.0%");
		simulatorComponent.setHeight("-1px");
		mainLayout.addComponent(simulatorComponent);

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setHeight("-1px");
		gridLayout_1.setMargin(false);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setColumns(2);

		// senderIdentificationSelectionLabel
		senderIdentificationSelectionLabel = new Label();
		senderIdentificationSelectionLabel.setImmediate(false);
		senderIdentificationSelectionLabel.setWidth("-1px");
		senderIdentificationSelectionLabel.setHeight("-1px");
		senderIdentificationSelectionLabel
				.setValue("!! Sender identification selection:");
		gridLayout_1.addComponent(senderIdentificationSelectionLabel, 0, 0);

		// senderIdentificationSelectionComboBox
		senderIdentificationSelectionComboBox = new ComboBox();
		senderIdentificationSelectionComboBox.setImmediate(false);
		senderIdentificationSelectionComboBox.setWidth("300px");
		senderIdentificationSelectionComboBox.setHeight("-1px");
		gridLayout_1.addComponent(senderIdentificationSelectionComboBox, 1, 0);
		gridLayout_1.setComponentAlignment(
				senderIdentificationSelectionComboBox, new Alignment(34));

		return gridLayout_1;
	}

}
