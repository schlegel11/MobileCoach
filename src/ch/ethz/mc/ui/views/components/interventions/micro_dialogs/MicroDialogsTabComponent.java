package ch.ethz.mc.ui.views.components.interventions.micro_dialogs;

import org.bson.types.ObjectId;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.Tab;
import com.vaadin.ui.VerticalLayout;

import ch.ethz.mc.conf.AdminMessageStrings;
import ch.ethz.mc.model.persistent.MicroDialog;
import ch.ethz.mc.ui.views.components.AbstractCustomComponent;
/*
 * Â© 2013-2017 Center for Digital Health Interventions, Health-IS Lab a joint
 * initiative of the Institute of Technology Management at University of St.
 * Gallen and the Department of Management, Technology and Economics at ETH
 * Zurich
 * 
 * For details see README.md file in the root folder of this project.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.val;

/**
 * Provides the micro dialogs tab component
 * 
 * @author Andreas Filler
 */
@SuppressWarnings("serial")
@Data
@EqualsAndHashCode(callSuper = false)
public abstract class MicroDialogsTabComponent extends AbstractCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout		mainLayout;
	@AutoGenerated
	private HorizontalLayout	buttonLayout;
	@AutoGenerated
	private Button				deleteDialogButton;
	@AutoGenerated
	private Button				moveDialogRightButton;
	@AutoGenerated
	private Button				moveDialogLeftButton;
	@AutoGenerated
	private Button				renameDialogButton;
	@AutoGenerated
	private Button				newDialogButton;
	@AutoGenerated
	private TabSheet			microDialogsTabSheet;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	protected MicroDialogsTabComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		localize(newDialogButton,
				AdminMessageStrings.MICRO_DIALOG_EDITING__NEW_DIALOG);
		localize(renameDialogButton,
				AdminMessageStrings.MICRO_DIALOG_EDITING__RENAME_DIALOG);
		localize(moveDialogLeftButton,
				AdminMessageStrings.MICRO_DIALOG_EDITING__MOVE_DIALOG_LEFT);
		localize(moveDialogRightButton,
				AdminMessageStrings.MICRO_DIALOG_EDITING__MOVE_DIALOG_RIGHT);
		localize(deleteDialogButton,
				AdminMessageStrings.MICRO_DIALOG_EDITING__DELETE_DIALOG);

		// set button start state
		setNothingSelected();
	}

	protected void setNothingSelected() {
		renameDialogButton.setEnabled(false);
		deleteDialogButton.setEnabled(false);
		moveDialogLeftButton.setEnabled(false);
		moveDialogRightButton.setEnabled(false);
	}

	protected void setSomethingSelected() {
		renameDialogButton.setEnabled(true);
		deleteDialogButton.setEnabled(true);
		val tabSheet = getMicroDialogsTabSheet();
		if (tabSheet.getTabPosition(
				tabSheet.getTab(tabSheet.getSelectedTab())) > 0) {
			moveDialogLeftButton.setEnabled(true);
		} else {
			moveDialogLeftButton.setEnabled(false);
		}
		if (tabSheet.getTabPosition(
				tabSheet.getTab(tabSheet.getSelectedTab())) < tabSheet
						.getComponentCount() - 1) {
			moveDialogRightButton.setEnabled(true);
		} else {
			moveDialogRightButton.setEnabled(false);
		}
	}

	public Tab addTabComponent(final MicroDialog microDialog,
			final ObjectId interventionId) {
		final MicroDialogEditComponent microDialogEditComponent = new MicroDialogEditComponentWithController(
				microDialog, interventionId);
		microDialogEditComponent.setImmediate(false);
		microDialogEditComponent.setWidth("100.0%");
		microDialogEditComponent.setHeight("-1px");

		// specific table options
		microDialogEditComponent.getMicroDialogElementsTable()
				.setSelectable(true);
		microDialogEditComponent.getMicroDialogElementsTable()
				.setImmediate(true);

		// Add edit component to tab and return
		return microDialogsTabSheet.addTab(microDialogEditComponent,
				microDialog.getName(), null);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// microDialogsTabSheet
		microDialogsTabSheet = new TabSheet();
		microDialogsTabSheet.setImmediate(true);
		microDialogsTabSheet.setWidth("100.0%");
		microDialogsTabSheet.setHeight("-1px");
		mainLayout.addComponent(microDialogsTabSheet);

		// buttonLayout
		buttonLayout = buildButtonLayout();
		mainLayout.addComponent(buttonLayout);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(true);
		buttonLayout.setSpacing(true);

		// newDialogButton
		newDialogButton = new Button();
		newDialogButton.setCaption("!!! New Dialog");
		newDialogButton.setIcon(new ThemeResource("img/add-icon-small.png"));
		newDialogButton.setImmediate(true);
		newDialogButton.setWidth("120px");
		newDialogButton.setHeight("-1px");
		buttonLayout.addComponent(newDialogButton);

		// renameDialogButton
		renameDialogButton = new Button();
		renameDialogButton.setCaption("!!! Rename Dialog");
		renameDialogButton.setImmediate(true);
		renameDialogButton.setWidth("120px");
		renameDialogButton.setHeight("-1px");
		buttonLayout.addComponent(renameDialogButton);

		// moveDialogLeftButton
		moveDialogLeftButton = new Button();
		moveDialogLeftButton.setCaption("!!! Move Dialog Left");
		moveDialogLeftButton
				.setIcon(new ThemeResource("img/arrow-left-icon-small.png"));
		moveDialogLeftButton.setImmediate(true);
		moveDialogLeftButton.setWidth("150px");
		moveDialogLeftButton.setHeight("-1px");
		buttonLayout.addComponent(moveDialogLeftButton);

		// moveDialogRightButton
		moveDialogRightButton = new Button();
		moveDialogRightButton.setCaption("!!! Move Dialog Right");
		moveDialogRightButton
				.setIcon(new ThemeResource("img/arrow-right-icon-small.png"));
		moveDialogRightButton.setImmediate(true);
		moveDialogRightButton.setWidth("150px");
		moveDialogRightButton.setHeight("-1px");
		buttonLayout.addComponent(moveDialogRightButton);

		// deleteDialogButton
		deleteDialogButton = new Button();
		deleteDialogButton.setCaption("!!! Delete Dialog");
		deleteDialogButton
				.setIcon(new ThemeResource("img/delete-icon-small.png"));
		deleteDialogButton.setImmediate(true);
		deleteDialogButton.setWidth("120px");
		deleteDialogButton.setHeight("-1px");
		buttonLayout.addComponent(deleteDialogButton);

		return buttonLayout;
	}
}
