package ch.ethz.mc.ui.views.components.interventions;

import java.util.Collection;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.val;

import org.bson.types.ObjectId;

import ch.ethz.mc.conf.AdminMessageStrings;
import ch.ethz.mc.model.ui.UIParticipant;
import ch.ethz.mc.ui.views.components.AbstractClosableEditComponent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

/**
 * Provides the intervention results component
 * 
 * @author Andreas Filler
 */
@SuppressWarnings("serial")
@Data
@EqualsAndHashCode(callSuper = false)
public class InterventionResultsComponent extends AbstractClosableEditComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout		mainLayout;
	@AutoGenerated
	private VerticalLayout		closeButtonLayout;
	@AutoGenerated
	private Button				closeButton;
	@AutoGenerated
	private HorizontalLayout	messageDialogButtonLayout;
	@AutoGenerated
	private Button				messageDialogExportButton;
	@AutoGenerated
	private Table				messageDialogTable;
	@AutoGenerated
	private Label				messageDialogLabel;
	@AutoGenerated
	private HorizontalLayout	variablesButtonLayout;
	@AutoGenerated
	private Button				variablesExportButton;
	@AutoGenerated
	private Button				editButton;
	@AutoGenerated
	private Table				variablesTable;
	@AutoGenerated
	private Label				variablesLabel;
	@AutoGenerated
	private HorizontalLayout	buttonLayout;
	@AutoGenerated
	private Button				sendMessageButton;
	@AutoGenerated
	private Button				refreshButton;
	@AutoGenerated
	private Table				participantsTable;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	protected InterventionResultsComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		localize(refreshButton, AdminMessageStrings.GENERAL__REFRESH);
		localize(sendMessageButton, AdminMessageStrings.RESULTS__SEND_MESSAGE);
		localize(variablesLabel, AdminMessageStrings.RESULTS__VARIABLES_LABEL);
		localize(editButton, AdminMessageStrings.GENERAL__EDIT);
		localize(variablesExportButton, AdminMessageStrings.GENERAL__EXPORT);
		localize(messageDialogLabel,
				AdminMessageStrings.RESULTS__MESSAGE_DIALOG_LABEL);
		localize(messageDialogExportButton, AdminMessageStrings.GENERAL__EXPORT);
		localize(closeButton, AdminMessageStrings.GENERAL__CLOSE);

		// set button start state
		setNothingSelected();

		// set table formatter
		participantsTable.setCellStyleGenerator(new Table.CellStyleGenerator() {
			@Override
			public String getStyle(final Table source, final Object itemId,
					final Object propertyId) {
				if (propertyId != null) {
					if (propertyId.equals(UIParticipant.MONITORING_STATUS)) {
						val uiParticipant = getUIModelObjectFromTableByObjectId(
								source, UIParticipant.class, itemId);
						if (uiParticipant.isBooleanMonitoringStatus()) {
							return "active";
						} else {
							return "inactive";
						}
					} else if (propertyId
							.equals(UIParticipant.SCREENING_SURVEY_STATUS)) {
						val uiParticipant = getUIModelObjectFromTableByObjectId(
								source, UIParticipant.class, itemId);
						if (uiParticipant.isBooleanScreeningSurveyStatus()) {
							return "active";
						} else {
							return "inactive";
						}
					} else if (propertyId
							.equals(UIParticipant.DATA_FOR_MONITORING_AVAILABLE)) {
						val uiParticipant = getUIModelObjectFromTableByObjectId(
								source, UIParticipant.class, itemId);
						if (uiParticipant.isBooleanDataForMonitoringAvailable()) {
							return "active";
						} else {
							return "inactive";
						}
					} else if (propertyId
							.equals(UIParticipant.INTERVENTION_STATUS)) {
						val uiParticipant = getUIModelObjectFromTableByObjectId(
								source, UIParticipant.class, itemId);
						if (uiParticipant.isBooleanInterventionStatus()) {
							return "active";
						} else {
							return "inactive";
						}
					}
				}

				return null;
			}
		});
	}

	@Override
	public void registerOkButtonListener(final ClickListener clickListener) {
		closeButton.addClickListener(clickListener);
	}

	@Override
	public void registerCancelButtonListener(final ClickListener clickListener) {
		// Not required
	}

	public void updateButtonStatus(
			final Collection<ObjectId> selectedUIParticipantsIds,
			final boolean isMonitoringActive) {

		// All other buttons
		if (selectedUIParticipantsIds == null
				|| selectedUIParticipantsIds.size() == 0) {
			setNothingSelected();
		} else {
			setSomethingSelected(isMonitoringActive);
		}
	}

	protected void setNothingSelected() {
		sendMessageButton.setEnabled(false);
		editButton.setEnabled(false);
		variablesExportButton.setEnabled(false);
		messageDialogExportButton.setEnabled(false);
	}

	protected void setSomethingSelected(final boolean isMonitoringActive) {
		sendMessageButton.setEnabled(isMonitoringActive);
		variablesExportButton.setEnabled(true);
		messageDialogExportButton.setEnabled(true);
	}

	protected void setVariableWithParticipantSelected(
			final boolean isOneSelected) {
		if (isOneSelected) {
			editButton.setEnabled(true);
		} else {
			editButton.setEnabled(false);
		}
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("900px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("900px");
		setHeight("-1px");

		// participantsTable
		participantsTable = new Table();
		participantsTable.setImmediate(false);
		participantsTable.setWidth("100.0%");
		participantsTable.setHeight("150px");
		mainLayout.addComponent(participantsTable);

		// buttonLayout
		buttonLayout = buildButtonLayout();
		mainLayout.addComponent(buttonLayout);

		// variablesLabel
		variablesLabel = new Label();
		variablesLabel.setStyleName("bold");
		variablesLabel.setImmediate(false);
		variablesLabel.setWidth("-1px");
		variablesLabel.setHeight("-1px");
		variablesLabel
				.setValue("!!! Variables with values of selected participants:");
		mainLayout.addComponent(variablesLabel);

		// variablesTable
		variablesTable = new Table();
		variablesTable.setImmediate(false);
		variablesTable.setWidth("100.0%");
		variablesTable.setHeight("150px");
		mainLayout.addComponent(variablesTable);

		// variablesButtonLayout
		variablesButtonLayout = buildVariablesButtonLayout();
		mainLayout.addComponent(variablesButtonLayout);

		// messageDialogLabel
		messageDialogLabel = new Label();
		messageDialogLabel.setStyleName("bold");
		messageDialogLabel.setImmediate(false);
		messageDialogLabel.setWidth("-1px");
		messageDialogLabel.setHeight("-1px");
		messageDialogLabel
				.setValue("!!! Message dialog of selected participants:");
		mainLayout.addComponent(messageDialogLabel);

		// messageDialogTable
		messageDialogTable = new Table();
		messageDialogTable.setImmediate(false);
		messageDialogTable.setWidth("100.0%");
		messageDialogTable.setHeight("150px");
		mainLayout.addComponent(messageDialogTable);

		// messageDialogButtonLayout
		messageDialogButtonLayout = buildMessageDialogButtonLayout();
		mainLayout.addComponent(messageDialogButtonLayout);

		// closeButtonLayout
		closeButtonLayout = buildCloseButtonLayout();
		mainLayout.addComponent(closeButtonLayout);
		mainLayout.setComponentAlignment(closeButtonLayout, new Alignment(48));

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		buttonLayout.setSpacing(true);

		// refreshButton
		refreshButton = new Button();
		refreshButton.setCaption("!!! Refresh");
		refreshButton.setIcon(new ThemeResource("img/loading-icon-small.png"));
		refreshButton.setImmediate(true);
		refreshButton.setWidth("100px");
		refreshButton.setHeight("-1px");
		buttonLayout.addComponent(refreshButton);

		// sendMessageButton
		sendMessageButton = new Button();
		sendMessageButton.setCaption("!!! Send Message");
		sendMessageButton.setIcon(new ThemeResource(
				"img/message-icon-small.png"));
		sendMessageButton.setImmediate(false);
		sendMessageButton.setWidth("150px");
		sendMessageButton.setHeight("-1px");
		buttonLayout.addComponent(sendMessageButton);

		return buttonLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildVariablesButtonLayout() {
		// common part: create layout
		variablesButtonLayout = new HorizontalLayout();
		variablesButtonLayout.setImmediate(false);
		variablesButtonLayout.setWidth("-1px");
		variablesButtonLayout.setHeight("-1px");
		variablesButtonLayout.setMargin(false);
		variablesButtonLayout.setSpacing(true);

		// editButton
		editButton = new Button();
		editButton.setCaption("!!! Edit");
		editButton.setIcon(new ThemeResource("img/edit-icon-small.png"));
		editButton.setImmediate(true);
		editButton.setWidth("100px");
		editButton.setHeight("-1px");
		variablesButtonLayout.addComponent(editButton);

		// variablesExportButton
		variablesExportButton = new Button();
		variablesExportButton.setCaption("!!! Export");
		variablesExportButton.setImmediate(true);
		variablesExportButton.setWidth("100px");
		variablesExportButton.setHeight("-1px");
		variablesButtonLayout.addComponent(variablesExportButton);

		return variablesButtonLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildMessageDialogButtonLayout() {
		// common part: create layout
		messageDialogButtonLayout = new HorizontalLayout();
		messageDialogButtonLayout.setImmediate(false);
		messageDialogButtonLayout.setWidth("-1px");
		messageDialogButtonLayout.setHeight("-1px");
		messageDialogButtonLayout.setMargin(false);

		// messageDialogExportButton
		messageDialogExportButton = new Button();
		messageDialogExportButton.setCaption("!!! Export");
		messageDialogExportButton.setImmediate(true);
		messageDialogExportButton.setWidth("100px");
		messageDialogExportButton.setHeight("-1px");
		messageDialogButtonLayout.addComponent(messageDialogExportButton);

		return messageDialogButtonLayout;
	}

	@AutoGenerated
	private VerticalLayout buildCloseButtonLayout() {
		// common part: create layout
		closeButtonLayout = new VerticalLayout();
		closeButtonLayout.setImmediate(false);
		closeButtonLayout.setWidth("100.0%");
		closeButtonLayout.setHeight("-1px");
		closeButtonLayout.setMargin(true);

		// closeButton
		closeButton = new Button();
		closeButton.setCaption("!!! Close");
		closeButton.setImmediate(true);
		closeButton.setWidth("100px");
		closeButton.setHeight("-1px");
		closeButtonLayout.addComponent(closeButton);
		closeButtonLayout.setComponentAlignment(closeButton, new Alignment(48));

		return closeButtonLayout;
	}

}
