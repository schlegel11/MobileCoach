package ch.ethz.mc.ui.views.components.basics;

/*
 * Â© 2013-2017 Center for Digital Health Interventions, Health-IS Lab a joint
 * initiative of the Institute of Technology Management at University of St.
 * Gallen and the Department of Management, Technology and Economics at ETH
 * Zurich
 * 
 * For details see README.md file in the root folder of this project.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.util.ArrayList;
import java.util.Locale;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.val;
import lombok.extern.log4j.Log4j2;
import ch.ethz.mc.conf.Constants;
import ch.ethz.mc.model.persistent.subelements.LString;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextArea;

/**
 * Provides a localized version of the text field component
 *
 * @author Andreas Filler
 */
@SuppressWarnings("serial")
@Data
@EqualsAndHashCode(callSuper = false)
@Log4j2
public class LocalizedTextArea extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout		mainLayout;
	@AutoGenerated
	private TextArea			textArea;
	@AutoGenerated
	private HorizontalLayout	buttonLayout;
	private LString				value;
	private Button				currentButton;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public LocalizedTextArea() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		val buttons = new ArrayList<Button>();

		val clickListener = new Button.ClickListener() {
			@Override
			public void buttonClick(final ClickEvent event) {
				for (val button : buttons) {
					if (event.getButton() == button) {
						if (value != null) {
							value.set((Locale) currentButton.getData(),
									textArea.getValue());
						}

						currentButton = button;

						if (value != null) {
							textArea.setValue(value
									.get((Locale) currentButton.getData()));
							textArea.setCursorPosition(0);
							textArea.setSelectionRange(0, 0);
						}

						button.setStyleName("selected", true);
					} else {
						button.setStyleName("selected", false);
					}
				}

				textArea.focus();
			}
		};

		for (val locale : Constants.getInterventionLocales()) {
			val button = new Button(locale.getDisplayLanguage(), clickListener);
			button.setWidth("100px");
			button.setData(locale);
			buttonLayout.addComponent(button);

			if (buttons.size() == 0) {
				currentButton = button;
				button.setStyleName("selected", true);
			}

			buttons.add(button);
		}
	}

	public void setLStringValue(final LString value) {
		textArea.setValue(value.get((Locale) currentButton.getData()));

		this.value = value;
	}

	public LString getLStringValue() {
		value.set((Locale) currentButton.getData(), textArea.getValue());

		return value;
	}

	@Override
	public void setImmediate(final boolean immediate) {
		super.setImmediate(immediate);
		if (textArea != null) {
			textArea.setImmediate(immediate);
		}
	}

	@Override
	public void focus() {
		super.focus();
		if (textArea != null) {
			textArea.focus();
		}
	}

	public void setNullSettingAllowed(final boolean value) {
		textArea.setNullSettingAllowed(value);
	}

	public int getCursorPosition() {
		return textArea.getCursorPosition();
	}

	public void setCursorPosition(final int position) {
		textArea.setCursorPosition(position);
	}

	public void setValueToCursorPosition(final String selectedVariable) {
		log.debug(
				"Former text value of string text area is {} and cursor position is {}",
				textArea.getValue(), textArea.getCursorPosition());
		try {
			textArea.setValue(textArea.getValue().substring(0,
					textArea.getCursorPosition()) + selectedVariable
					+ textArea.getValue()
							.substring(textArea.getCursorPosition()));

			textArea.setCursorPosition(
					textArea.getCursorPosition() + selectedVariable.length());
		} catch (final Exception e) {
			log.warn(
					"Error occured while setting variable to string text area...fixing by setting text to the beginning (Workaround for Vaadin time shift)");

			textArea.setValue(textArea.getValue() + selectedVariable);

			textArea.setCursorPosition(textArea.getValue().length());
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// buttonLayout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("30px");
		buttonLayout.setMargin(false);
		buttonLayout.setSpacing(true);
		mainLayout.addComponent(buttonLayout);

		// textArea
		textArea = new TextArea();
		textArea.setImmediate(false);
		textArea.setWidth("100.0%");
		textArea.setHeight("100.0%");
		mainLayout.addComponent(textArea, "top:35.0px;left:0.0px;");

		return mainLayout;
	}
}
