package ch.ethz.mc.ui.views.components.basics;

/*
 * Copyright (C) 2014-2015 MobileCoach Team at Health IS-Lab
 * 
 * See a detailed listing of copyright owners and team members in
 * the README.md file in the root folder of this project.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import lombok.EqualsAndHashCode;
import ch.ethz.mc.conf.AdminMessageStrings;
import ch.ethz.mc.conf.Messages;
import ch.ethz.mc.ui.views.components.AbstractCustomComponent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;

/**
 * Provides the variable text field component
 * 
 * @author Andreas Filler
 */
@SuppressWarnings("serial")
@EqualsAndHashCode(callSuper = false)
public class VariableTextFieldComponent extends AbstractCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout	mainLayout;
	@AutoGenerated
	private Button				editButton;
	@AutoGenerated
	private Label				variableValue;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public VariableTextFieldComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		localize(editButton, AdminMessageStrings.GENERAL__EDIT);
	}

	/**
	 * Get the button of the component
	 * 
	 * @return
	 */
	public Button getButton() {
		return editButton;
	}

	/**
	 * Set the value of the text field
	 * 
	 * @param value
	 */
	public void setValue(final String value) {
		if (value == null || value.equals("")) {
			variableValue.setValue(Messages
					.getAdminString(AdminMessageStrings.GENERAL__EMPTY));
		} else {
			variableValue.setValue(value);
		}
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// variableValue
		variableValue = new Label();
		variableValue.setStyleName("v-textfield read-only");
		variableValue.setImmediate(false);
		variableValue.setWidth("100.0%");
		variableValue.setHeight("25px");
		variableValue.setValue(" - NO VALUE SET -");
		mainLayout.addComponent(variableValue);
		mainLayout.setExpandRatio(variableValue, 1.0f);
		mainLayout.setComponentAlignment(variableValue, new Alignment(33));

		// editButton
		editButton = new Button();
		editButton.setCaption("!!! Edit");
		editButton.setIcon(new ThemeResource("img/edit-icon-small.png"));
		editButton.setImmediate(true);
		editButton.setWidth("100px");
		editButton.setHeight("-1px");
		mainLayout.addComponent(editButton);
		mainLayout.setComponentAlignment(editButton, new Alignment(34));

		return mainLayout;
	}

}
