package ch.ethz.mc.ui.components.main_view.interventions.external_services;

/*
 * Â© 2013-2017 Center for Digital Health Interventions, Health-IS Lab a joint
 * initiative of the Institute of Technology Management at University of St.
 * Gallen and the Department of Management, Technology and Economics at ETH
 * Zurich
 * 
 * For details see README.md file in the root folder of this project.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.val;
import ch.ethz.mc.conf.AdminMessageStrings;
import ch.ethz.mc.model.ui.UIIntervention;
import ch.ethz.mc.model.ui.UIInterventionExternalService;
import ch.ethz.mc.ui.components.AbstractCustomComponent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

/**
 * Provides the intervention variables edit component
 *
 * @author Andreas Filler
 */
@SuppressWarnings("serial")
@Data
@EqualsAndHashCode(callSuper = false)
public class ExternalServicesEditComponent extends AbstractCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout		mainLayout;
	@AutoGenerated
	private HorizontalLayout	buttonLayout;
	@AutoGenerated
	private HorizontalLayout	textAreaLayout;
	@AutoGenerated
	private Button				deleteButton;
	@AutoGenerated
	private Button				renameButton;
	@AutoGenerated
	private Button				newButton;
	@AutoGenerated
	private Button				renewTokenButton;
	@AutoGenerated
	private Button				activeInactiveButton;
	@AutoGenerated
	private Table				externalServicesTable;
	@AutoGenerated
	private TextArea			serviceIdTokenTextArea;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	protected ExternalServicesEditComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		localize(newButton, AdminMessageStrings.GENERAL__NEW);
		localize(renameButton, AdminMessageStrings.GENERAL__RENAME);
		localize(deleteButton, AdminMessageStrings.GENERAL__DELETE);
		localize(renewTokenButton, AdminMessageStrings.INTERVENTION_EXTERNAL_SERVICES_EDITING__RENEW_TOKEN_BUTTON);
		localize(activeInactiveButton,
				AdminMessageStrings.INTERVENTION_EXTERNAL_SERVICES_EDITING__ACTIVE_INACTIVE_BUTTON);
		localize(serviceIdTokenTextArea,
				AdminMessageStrings.INTERVENTION_EXTERNAL_SERVICES_EDITING__SERVICE_ID_TOKEN_TEXT_AREA);
		
		// set table formatter
		externalServicesTable
				.setCellStyleGenerator(new Table.CellStyleGenerator() {
					@Override
					public String getStyle(final Table source,
							final Object itemId, final Object propertyId) {
						if (propertyId != null) {
							if (propertyId.equals(
									UIInterventionExternalService.STATUS)) {
								val uiIntervention = getUIModelObjectFromTableByObjectId(
										source, UIInterventionExternalService.class, itemId);
								if (uiIntervention
										.isBooleanStatus()) {
									return "active";
								} else {
									return "inactive";
								}
							}
						}

						return null;
					}
				});

		// set button start state
		setNothingSelected();
	}

	protected void setNothingSelected() {
		renameButton.setEnabled(false);
		deleteButton.setEnabled(false);
		renewTokenButton.setEnabled(false);
		activeInactiveButton.setEnabled(false);
		serviceIdTokenTextArea.setEnabled(false);
		serviceIdTokenTextArea.setReadOnly(false);
		serviceIdTokenTextArea.clear();
		serviceIdTokenTextArea.setReadOnly(true);
	}

	protected void setSomethingSelected() {
		renameButton.setEnabled(true);
		deleteButton.setEnabled(true);
		renewTokenButton.setEnabled(true);
		activeInactiveButton.setEnabled(true);
		serviceIdTokenTextArea.setEnabled(true);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// variablesTable
		externalServicesTable = new Table();
		externalServicesTable.setImmediate(false);
		externalServicesTable.setWidth("100.0%");
		externalServicesTable.setHeight("350px");
		mainLayout.addComponent(externalServicesTable);

		// buttonLayout
		buttonLayout = buildButtonLayout();
		mainLayout.addComponent(buttonLayout);
		
		// textAreaLayout
		textAreaLayout = buildTextAreaLayout();
		mainLayout.addComponent(textAreaLayout);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		buttonLayout.setSpacing(true);

		// newButton
		newButton = new Button();
		newButton.setCaption("!!! New");
		newButton.setIcon(new ThemeResource("img/add-icon-small.png"));
		newButton.setImmediate(true);
		newButton.setWidth("100px");
		newButton.setHeight("-1px");
		buttonLayout.addComponent(newButton);

		// renameButton
		renameButton = new Button();
		renameButton.setCaption("!!! Rename");
		renameButton.setImmediate(true);
		renameButton.setWidth("100px");
		renameButton.setHeight("-1px");
		buttonLayout.addComponent(renameButton);

		// deleteButton
		deleteButton = new Button();
		deleteButton.setCaption("!!! Delete");
		deleteButton.setIcon(new ThemeResource("img/delete-icon-small.png"));
		deleteButton.setImmediate(true);
		deleteButton.setWidth("100px");
		deleteButton.setHeight("-1px");
		buttonLayout.addComponent(deleteButton);
		
		// renewTokenButton
		renewTokenButton = new Button();
		renewTokenButton.setCaption("!!! Renew Token");
		renewTokenButton.setImmediate(true);
		renewTokenButton.setWidth("100px");
		renewTokenButton.setHeight("-1px");
		buttonLayout.addComponent(renewTokenButton);
		
		// enableDisableButton
		activeInactiveButton = new Button();
		activeInactiveButton.setCaption("!!! Active Inactive");
		activeInactiveButton.setImmediate(true);
		activeInactiveButton.setWidth("180px");
		activeInactiveButton.setHeight("-1px");
		buttonLayout.addComponent(activeInactiveButton);
		
		return buttonLayout;
	}
	
	@AutoGenerated
	private HorizontalLayout buildTextAreaLayout() {
		// common part: create layout
		textAreaLayout = new HorizontalLayout();
		textAreaLayout.setImmediate(false);
		textAreaLayout.setWidth("100.0%");
		textAreaLayout.setHeight("-1px");
		textAreaLayout.setMargin(false);
		
		// serviceIdTokenTextArea
		serviceIdTokenTextArea = new TextArea();
		serviceIdTokenTextArea.setCaption("!!! Service id Token Output");
		serviceIdTokenTextArea.setWidth("100.0%");
		serviceIdTokenTextArea.setHeight("-1px");
		serviceIdTokenTextArea.setImmediate(true);
		serviceIdTokenTextArea.setReadOnly(true);
		textAreaLayout.addComponent(serviceIdTokenTextArea);
		
		return textAreaLayout;
		
	}

}
