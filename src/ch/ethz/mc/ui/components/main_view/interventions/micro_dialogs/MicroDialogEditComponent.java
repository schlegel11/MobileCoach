package ch.ethz.mc.ui.components.main_view.interventions.micro_dialogs;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

import ch.ethz.mc.conf.AdminMessageStrings;
import ch.ethz.mc.model.ui.UIMicroDialogElementInterface;
import ch.ethz.mc.ui.components.AbstractCustomComponent;
/*
 * Â© 2013-2017 Center for Digital Health Interventions, Health-IS Lab a joint
 * initiative of the Institute of Technology Management at University of St.
 * Gallen and the Department of Management, Technology and Economics at ETH
 * Zurich
 * 
 * For details see README.md file in the root folder of this project.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.val;

/**
 * Provides the micro dialog edit component
 *
 * @author Andreas Filler
 */
@SuppressWarnings("serial")
@Data
@EqualsAndHashCode(callSuper = false)
public class MicroDialogEditComponent extends AbstractCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout		mainLayout;
	@AutoGenerated
	private HorizontalLayout	buttonLayout;
	@AutoGenerated
	private Button				deleteButton;
	@AutoGenerated
	private Button				moveDownButton;
	@AutoGenerated
	private Button				moveUpButton;
	@AutoGenerated
	private Button				duplicateButton;
	@AutoGenerated
	private Button				editButton;
	@AutoGenerated
	private Button				newDecisionPointButton;
	@AutoGenerated
	private Button				newMessageButton;
	@AutoGenerated
	private Table				microDialogElementsTable;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	protected MicroDialogEditComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		localize(newMessageButton,
				AdminMessageStrings.MICRO_DIALOG_EDITING__NEW_MESSAGE);
		localize(newDecisionPointButton,
				AdminMessageStrings.MICRO_DIALOG_EDITING__NEW_DECISION_POINT);
		localize(editButton, AdminMessageStrings.GENERAL__EDIT);
		localize(duplicateButton, AdminMessageStrings.GENERAL__DUPLICATE);
		localize(moveUpButton, AdminMessageStrings.GENERAL__MOVE_UP);
		localize(moveDownButton, AdminMessageStrings.GENERAL__MOVE_DOWN);
		localize(deleteButton, AdminMessageStrings.GENERAL__DELETE);

		// set table formatter
		microDialogElementsTable
				.setCellStyleGenerator(new Table.CellStyleGenerator() {
					@Override
					public String getStyle(final Table source,
							final Object itemId, final Object propertyId) {
						if (propertyId != null) {
							if (propertyId.equals(
									UIMicroDialogElementInterface.TYPE)) {
								final val uiMicroDialogElement = getUIModelObjectFromTableByObjectId(
										source,
										UIMicroDialogElementInterface.class,
										itemId);

								if (uiMicroDialogElement.isMessage()) {
									return "message";
								} else {
									return "decision-point";
								}
							}
						}

						return null;
					}
				});

		// set button start state
		setNothingSelected();
	}

	protected void setNothingSelected() {
		editButton.setEnabled(false);
		duplicateButton.setEnabled(false);
		moveUpButton.setEnabled(false);
		moveDownButton.setEnabled(false);
		deleteButton.setEnabled(false);
	}

	protected void setSomethingSelected() {
		editButton.setEnabled(true);
		duplicateButton.setEnabled(true);
		moveUpButton.setEnabled(true);
		moveDownButton.setEnabled(true);
		deleteButton.setEnabled(true);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// microDialogElementsTable
		microDialogElementsTable = new Table();
		microDialogElementsTable.setImmediate(false);
		microDialogElementsTable.setWidth("100.0%");
		microDialogElementsTable.setHeight("300px");
		mainLayout.addComponent(microDialogElementsTable);

		// buttonLayout
		buttonLayout = buildButtonLayout();
		mainLayout.addComponent(buttonLayout);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		buttonLayout.setSpacing(true);

		// newMessageButton
		newMessageButton = new Button();
		newMessageButton.setCaption("!!! New Message");
		newMessageButton.setIcon(new ThemeResource("img/add-icon-small.png"));
		newMessageButton.setImmediate(true);
		newMessageButton.setWidth("150px");
		newMessageButton.setHeight("-1px");
		buttonLayout.addComponent(newMessageButton);

		// newDecisionPointButton
		newDecisionPointButton = new Button();
		newDecisionPointButton.setCaption("!!! New Decision Point");
		newDecisionPointButton
				.setIcon(new ThemeResource("img/add-icon-small.png"));
		newDecisionPointButton.setImmediate(true);
		newDecisionPointButton.setWidth("150px");
		newDecisionPointButton.setHeight("-1px");
		buttonLayout.addComponent(newDecisionPointButton);

		// editButton
		editButton = new Button();
		editButton.setCaption("!!! Edit");
		editButton.setIcon(new ThemeResource("img/edit-icon-small.png"));
		editButton.setImmediate(true);
		editButton.setWidth("100px");
		editButton.setHeight("-1px");
		buttonLayout.addComponent(editButton);

		// duplicateButton
		duplicateButton = new Button();
		duplicateButton.setCaption("!!! Duplicate");
		duplicateButton.setImmediate(true);
		duplicateButton.setWidth("100px");
		duplicateButton.setHeight("-1px");
		buttonLayout.addComponent(duplicateButton);

		// moveUpButton
		moveUpButton = new Button();
		moveUpButton.setCaption("!!! Move Up");
		moveUpButton.setIcon(new ThemeResource("img/arrow-up-icon-small.png"));
		moveUpButton.setImmediate(true);
		moveUpButton.setWidth("120px");
		moveUpButton.setHeight("-1px");
		buttonLayout.addComponent(moveUpButton);

		// moveDownButton
		moveDownButton = new Button();
		moveDownButton.setCaption("!!! Move Down");
		moveDownButton
				.setIcon(new ThemeResource("img/arrow-down-icon-small.png"));
		moveDownButton.setImmediate(true);
		moveDownButton.setWidth("120px");
		moveDownButton.setHeight("-1px");
		buttonLayout.addComponent(moveDownButton);

		// deleteButton
		deleteButton = new Button();
		deleteButton.setCaption("!!! Delete");
		deleteButton.setIcon(new ThemeResource("img/delete-icon-small.png"));
		deleteButton.setImmediate(true);
		deleteButton.setWidth("100px");
		deleteButton.setHeight("-1px");
		buttonLayout.addComponent(deleteButton);

		return buttonLayout;
	}

}
