package ch.ethz.mc.ui.views.components.simulator;

/*
 * Copyright (C) 2013-2016 MobileCoach Team at the Health-IS Lab
 *
 * For details see README.md file in the root folder of this project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import lombok.Data;
import lombok.EqualsAndHashCode;
import ch.ethz.mc.conf.AdminMessageStrings;
import ch.ethz.mc.conf.Constants;
import ch.ethz.mc.ui.views.components.AbstractCustomComponent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

/**
 * Provides the simulator component
 *
 * @author Andreas Filler
 */
@SuppressWarnings("serial")
@Data
@EqualsAndHashCode(callSuper = false)
public class SimulatorComponent extends AbstractCustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout		mainLayout;
	@AutoGenerated
	private Button				sendSimulatedMessageButton;
	@AutoGenerated
	private TextField			newMessageTextField;
	@AutoGenerated
	private Table				messagesTable;
	@AutoGenerated
	private HorizontalLayout	buttonsLayout;
	@AutoGenerated
	private Button				deactivateFastForwardModeButton;
	@AutoGenerated
	private Button				activateFastForwadModeButton;
	@AutoGenerated
	private Button				nextDayButton;
	@AutoGenerated
	private Button				nextHourButton;
	@AutoGenerated
	private Label				currentTimeLabel;
	@AutoGenerated
	private Label				simulatorLabel;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	protected SimulatorComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// manually added
		localize(sendSimulatedMessageButton,
				AdminMessageStrings.SIMULATOR_COMPONENT__SEND_SIMULATED_MESSAGE);
		localize(
				nextHourButton,
				AdminMessageStrings.SIMULATOR_COMPONENT__JUMP_ONE_HOUR_TO_THE_FUTURE);
		localize(
				nextDayButton,
				AdminMessageStrings.SIMULATOR_COMPONENT__JUMP_ONE_DAY_TO_THE_FUTURE);
		localize(
				activateFastForwadModeButton,
				AdminMessageStrings.SIMULATOR_COMPONENT__ACTIVATE_FAST_FORWARD_MODE);
		localize(
				deactivateFastForwardModeButton,
				AdminMessageStrings.SIMULATOR_COMPONENT__DEACTIVATE_FAST_FORWARD_MODE);
		localize(
				currentTimeLabel,
				AdminMessageStrings.SIMULATOR_COMPONENT__THE_CURRENT_SIMULATED_TIME_IS_X);
		localize(simulatorLabel,
				AdminMessageStrings.SIMULATOR_COMPONENT__SIMULATOR,
				Constants.getSmsSimulationNumber());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// simulatorLabel
		simulatorLabel = new Label();
		simulatorLabel.setStyleName("bold");
		simulatorLabel.setImmediate(false);
		simulatorLabel.setWidth("-1px");
		simulatorLabel.setHeight("-1px");
		simulatorLabel.setValue("!!! SIMULATOR for phone number #####");
		mainLayout.addComponent(simulatorLabel);

		// currentTimeLabel
		currentTimeLabel = new Label();
		currentTimeLabel.setImmediate(false);
		currentTimeLabel.setWidth("-1px");
		currentTimeLabel.setHeight("-1px");
		currentTimeLabel.setValue("!!! The current simulated time is #####");
		mainLayout.addComponent(currentTimeLabel);

		// buttonsLayout
		buttonsLayout = buildButtonsLayout();
		mainLayout.addComponent(buttonsLayout);

		// messagesTable
		messagesTable = new Table();
		messagesTable.setImmediate(false);
		messagesTable.setWidth("100.0%");
		messagesTable.setHeight("150px");
		mainLayout.addComponent(messagesTable);

		// newMessageTextField
		newMessageTextField = new TextField();
		newMessageTextField.setImmediate(false);
		newMessageTextField.setWidth("100.0%");
		newMessageTextField.setHeight("-1px");
		mainLayout.addComponent(newMessageTextField);

		// sendSimulatedMessageButton
		sendSimulatedMessageButton = new Button();
		sendSimulatedMessageButton.setCaption("!!! Send Simulated Message");
		sendSimulatedMessageButton.setImmediate(true);
		sendSimulatedMessageButton.setWidth("100.0%");
		sendSimulatedMessageButton.setHeight("-1px");
		mainLayout.addComponent(sendSimulatedMessageButton);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonsLayout() {
		// common part: create layout
		buttonsLayout = new HorizontalLayout();
		buttonsLayout.setImmediate(false);
		buttonsLayout.setWidth("-1px");
		buttonsLayout.setHeight("-1px");
		buttonsLayout.setMargin(false);
		buttonsLayout.setSpacing(true);

		// nextHourButton
		nextHourButton = new Button();
		nextHourButton.setCaption("!!! Jump one HOUR to the Future!");
		nextHourButton.setImmediate(true);
		nextHourButton.setWidth("300px");
		nextHourButton.setHeight("-1px");
		buttonsLayout.addComponent(nextHourButton);

		// nextDayButton
		nextDayButton = new Button();
		nextDayButton.setCaption("!!! Jump one DAY to the Future!");
		nextDayButton.setImmediate(true);
		nextDayButton.setWidth("300px");
		nextDayButton.setHeight("-1px");
		buttonsLayout.addComponent(nextDayButton);

		// activateFastForwadModeButton
		activateFastForwadModeButton = new Button();
		activateFastForwadModeButton
		.setCaption("!!! Activate Fast Forward Mode");
		activateFastForwadModeButton.setImmediate(true);
		activateFastForwadModeButton.setWidth("200px");
		activateFastForwadModeButton.setHeight("-1px");
		buttonsLayout.addComponent(activateFastForwadModeButton);

		// deactivateFastForwardModeButton
		deactivateFastForwardModeButton = new Button();
		deactivateFastForwardModeButton
		.setCaption("!!! Deactivate Fast Forward Mode");
		deactivateFastForwardModeButton.setImmediate(true);
		deactivateFastForwardModeButton.setWidth("200px");
		deactivateFastForwardModeButton.setHeight("-1px");
		buttonsLayout.addComponent(deactivateFastForwardModeButton);

		return buttonsLayout;
	}

}
